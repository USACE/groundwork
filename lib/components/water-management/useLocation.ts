import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { buildRequest } from "./cda";

// Return types generated by https://app.quicktype.io/
interface Location {
  "office-id": string;
  name: string;
  latitude: number;
  longitude: number;
  active: boolean;
  "public-name": string;
  "long-name": string;
  "timezone-name": string;
  "location-type": string;
  "location-kind": string;
  nation: string;
  "state-initial": string;
  "county-name": string;
  "nearest-city": string;
  "horizontal-datum": string;
  "vertical-datum": string;
  elevation: number;
  "map-label": string;
  "bounding-office-id": string;
}

type GetLocationParams = {
  office: string;
  unit?: string;
};

const getLocation = async (
  location: string,
  params: GetLocationParams,
  cdaUrl?: string
): Promise<Location> => {
  const paramString = new URLSearchParams(params).toString();
  const url = buildRequest(`/locations/${location}`, paramString, cdaUrl);
  const response = await fetch(url, {
    headers: {
      accept: "application/json;version=2",
    },
  });
  if (!response.ok) {
    throw new Error("Error retrieving data.");
  }
  return response.json();
};

interface useLocationParams {
  location: string;
  params: GetLocationParams;
  cdaUrl?: string;
  queryOptions?: Omit<UseQueryOptions<Location>, "queryKey" | "queryFn">;
}

const useLocation = ({
  location,
  params,
  cdaUrl,
  queryOptions,
}: useLocationParams) =>
  useQuery({
    queryKey: ["cda", "location", location],
    queryFn: async () => {
      return getLocation(location, params, cdaUrl);
    },
    ...queryOptions,
  });

export { useLocation };
export default useLocation;
