import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { buildRequest } from "./cda";

// Return types generated by https://app.quicktype.io/
interface CatalogTS {
  total: number;
  entries: Entry[];
  "page-size": number;
}

interface Entry {
  office: string;
  name: string;
  units: string;
  interval: string;
  "interval-offset": number;
  "time-zone": string;
  extents: Extent[];
}

interface Extent {
  "earliest-time": string;
  "last-update": string;
  "latest-time": string;
}

type GetCdaCatalogParams = {
  office: string;
  like: string;
};

const getCatalogTS = async (
  params: GetCdaCatalogParams
): Promise<CatalogTS> => {
  const paramString = new URLSearchParams(params).toString();
  const url = buildRequest("/catalog/TIMESERIES", paramString);
  const response = await fetch(url, {
    headers: {
      accept: "application/json;version=2",
    },
  });
  if (!response.ok) {
    throw new Error("Error retrieving data.");
  }
  return response.json();
};

const useCatalogTS = (
  params: GetCdaCatalogParams,
  queryOptions?: Omit<UseQueryOptions<CatalogTS>, "queryKey" | "queryFn">
) =>
  useQuery({
    queryKey: ["cda", "catalog", params.like],
    queryFn: async () => {
      return getCatalogTS(params);
    },
    ...queryOptions,
  });

export { useCatalogTS };
export default useCatalogTS;
