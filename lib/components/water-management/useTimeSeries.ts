import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { buildRequest } from "./cda";

const roundToFiveMinutes = (datetime: Date) => {
  const fiveMinutes = 1000 * 60 * 5;
  return new Date(Math.round(datetime.getTime() / fiveMinutes) * fiveMinutes);
};

// Return types generated by https://app.quicktype.io/
interface TimeSeries {
  begin: string;
  end: string;
  interval: string;
  "interval-offset": number;
  name: string;
  "office-id": string;
  page: string;
  "page-size": number;
  "time-zone": string;
  total: number;
  units: string;
  "value-columns": ValueColumn[];
  values: Array<number[]>;
  "vertical-datum-info": VerticalDatumInfo;
}

interface ValueColumn {
  name: string;
  ordinal: number;
  datatype: string;
}

interface VerticalDatumInfo {
  office: string;
  unit: string;
  location: string;
  "native-datum": string;
  elevation: number;
  offsets: Offset[];
}

interface Offset {
  estimate: boolean;
  "to-datum": string;
  value: number;
}

type GetTimeSeriesParams = {
  name: string;
  office: string;
  unit?: string;
  datum?: string;
  begin?: string;
  end?: string;
  timezone?: string;
  format?: string;
};

const getTimeSeries = async (
  params: GetTimeSeriesParams,
  cdaUrl?: string
): Promise<TimeSeries> => {
  const paramString = new URLSearchParams(params).toString();
  const url = buildRequest("/timeseries", paramString, cdaUrl);
  const response = await fetch(url, {
    headers: {
      accept: "application/json;version=2",
    },
  });
  if (!response.ok) {
    throw new Error("Error retrieving data.");
  }
  return response.json();
};

interface useTimeSeriesParams {
  params: GetTimeSeriesParams;
  cdaUrl?: string;
  queryOptions?: Omit<UseQueryOptions<TimeSeries>, "queryKey" | "queryFn">;
}

const useTimeSeries = ({
  params,
  cdaUrl,
  queryOptions,
}: useTimeSeriesParams) => {
  const queryKey = ["cda", "timeseries", params.name];
  // Round begin/end datetimes to nearest five-minute interval to prevent
  // constant refetching.  There's probably a better way to do this?
  if (params.begin) {
    const beginDate = new Date(Date.parse(params.begin));
    const roundedBegin = roundToFiveMinutes(beginDate);
    queryKey.push(`begin: ${roundedBegin.toISOString()}`);
  }
  if (params.end) {
    const endDate = new Date(Date.parse(params.end));
    const roundedBegin = roundToFiveMinutes(endDate);
    queryKey.push(`begin: ${roundedBegin.toISOString()}`);
  }
  return useQuery({
    queryKey: queryKey,
    queryFn: async () => {
      return getTimeSeries(params, cdaUrl);
    },
    ...queryOptions,
  });
};

export { useTimeSeries };
export default useTimeSeries;
