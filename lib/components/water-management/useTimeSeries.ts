import { UseQueryOptions, useQuery } from "@tanstack/react-query";

const CDA_URL: string = "https://localhost:7000/lrl-data";

// Return types generated by https://app.quicktype.io/
interface TimeSeries {
  begin: string;
  end: string;
  interval: string;
  "interval-offset": number;
  name: string;
  "office-id": string;
  page: string;
  "page-size": number;
  "time-zone": string;
  total: number;
  units: string;
  "value-columns": ValueColumn[];
  values: Array<number[]>;
  "vertical-datum-info": VerticalDatumInfo;
}

interface ValueColumn {
  name: string;
  ordinal: number;
  datatype: string;
}

interface VerticalDatumInfo {
  office: string;
  unit: string;
  location: string;
  "native-datum": string;
  elevation: number;
  offsets: Offset[];
}

interface Offset {
  estimate: boolean;
  "to-datum": string;
  value: number;
}

type GetTimeSeriesParams = {
  name: string;
  office: string;
  unit?: string;
  datum?: string;
  begin?: string;
  end?: string;
  timezone?: string;
  format?: string;
};

/**
 * Create a CDA request URL string by appending provided endpoint and parameters
 * to the base CDA_URL.  Office parameter will be appended if not included.
 * @param endpoint The "base" of the API call (before parameters).
 * @param paramStr Request parameters in the form of "parameter=value&parameter=value".
 * @returns A full CDA request URL string.
 */
export const buildRequest = (endpoint: string, paramStr: string) => {
  let cdaRequest = CDA_URL + endpoint + "?" + paramStr;
  return cdaRequest;
};

const getTimeSeries = async (
  params: GetTimeSeriesParams
): Promise<TimeSeries> => {
  const paramString = new URLSearchParams(params).toString();
  const url = buildRequest("/timeseries", paramString);
  const response = await fetch(url, {
    headers: {
      accept: "application/json;version=2",
    },
  });
  if (!response.ok) {
    throw new Error("Error retrieving data.");
  }
  return response.json();
};

const useTimeSeries = (
  params: GetTimeSeriesParams,
  queryOptions?: Omit<UseQueryOptions<TimeSeries>, "queryKey" | "queryFn">
) => {
  const queryKey = ["cda", "timeseries", params.name];
  if (params.begin) queryKey.push(`begin: ${params.begin}`);
  if (params.end) queryKey.push(`end: ${params.end}`);
  return useQuery({
    queryKey: queryKey,
    queryFn: async () => {
      return getTimeSeries(params);
    },
    ...queryOptions,
  });
};

export { useTimeSeries };
export default useTimeSeries;
